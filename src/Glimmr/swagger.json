{
  "openapi": "3.0.1",
  "info": {
    "title": "Glimmr",
    "version": "1.0"
  },
  "paths": {
    "/api/DreamData": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Default endpoint - returns a SystemData object.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/authorizeDevice": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Trigger device authorization for the specified device.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The device Id to try authorizing.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/database": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Download a backup of the current database.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Upload and replace the database with a copy from a db download.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/databaseJson": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Retrieve the entire datastore in JSON format",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StoreData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreData"
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/devices": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Retrieve the current list of devices",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IColorTargetData"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IColorTargetData"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IColorTargetData"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/flashDevice": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Flash an entire device.",
        "requestBody": {
          "description": "The ID of the device to flash on/off.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/flashLed": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Flash a specific LED from the grid",
        "requestBody": {
          "description": "The LED ID to flash.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/flashSector": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Flash a specific Sector",
        "requestBody": {
          "description": "The sector ID to flash.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/glimmrData": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Retrieves a simplified version of our SystemData object used for Glimmr-to-Glimmr control.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/logs": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Download the current log file.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/mode": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Retrieve the current device mode",
        "description": "Device Modes:\r\nOff = 0,\r\nVideo = 1,\r\nAudio = 2,\r\nAudioVideo = 4,\r\nAmbient = 3,\r\nUdp = 5,\r\nDreamScreen = 6",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Set a new device mode",
        "description": "Device Modes:\r\nOff = 0,\r\nVideo = 1,\r\nAudio = 2,\r\nAudioVideo = 4,\r\nAmbient = 3,\r\nUdp = 5,\r\nDreamScreen = 6",
        "requestBody": {
          "description": "The new device mode to set.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceMode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceMode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceMode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceMode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/scanDevices": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Triggers a device refresh",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/stats": {
      "get": {
        "tags": [
          "DreamData"
        ],
        "summary": "Fetch current CPU statistics.",
        "description": "Example json:\r\n            {\r\n            \"loadAvg1\": 1.23,\r\n            \"loadAvg15\": 0.33,\r\n            \"loadAvg5\": 0.52,\r\n            \"tempAvg\": 146,\r\n            \"tempCurrent\": 146,\r\n            \"tempMax\": 146,\r\n            \"tempMin\": 146,\r\n            \"uptime\": \"1:12\",\r\n            \"throttledState\": [\r\n            \"Soft Temperature Limit has occurred\"\r\n            ]\r\n            }",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/systemControl": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Triggers a system action.",
        "requestBody": {
          "description": "Available commands are \"restart\", \"shutdown\", \"reboot\", and \"update\".\r\n            Restart restarts ONLY the glimmr service.\r\n            Shutdown shuts down the entire machine.\r\n            Reboot triggers a system reboot.\r\n            Update will stop Glimmr, update the software, and re-start the service.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/DreamData/systemData": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Update System configuration",
        "requestBody": {
          "description": "A SystemData object.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemData"
                }
              }
            }
          }
        }
      }
    },
    "/api/DreamData/updateDevice": {
      "post": {
        "tags": [
          "DreamData"
        ],
        "summary": "Update a specific Devices data.",
        "requestBody": {
          "description": "A JSON string representing the ColorTarget to update.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/IColorTargetData"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IColorTargetData"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/IColorTargetData"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/IColorTargetData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IColorTargetData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IColorTargetData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IColorTargetData"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AmbientScene": {
        "type": "object",
        "properties": {
          "Colors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of colors used by the scene.",
            "nullable": true
          },
          "AnimationTime": {
            "type": "number",
            "description": "Amount of time (in milliseconds) between color updates.",
            "format": "float"
          },
          "Mode": {
            "type": "string",
            "description": "Animation mode.\r\nLinear = 0 (Colors progress normally)\r\nReverse = 1 (Colors progress in reverse direction)\r\nRandom = 2 (Colors are selected randomly)\r\nRandomAll = 3 (One random color for everything)\r\nLinearAll = 4 (Colors progress normally, one color for everything)",
            "nullable": true
          },
          "Easing": {
            "type": "string",
            "description": "Easing mode.\r\nBlend = 0 (Colors fade directly between one another)\r\nFadeIn = 1 (Color fades in after being replaced)\r\nFadeOut = 2 (Color fades out, is replaced, turns on full)\r\nFadeInOut = 3 (Colors fade in/out before being replaced)",
            "nullable": true
          },
          "EasingTime": {
            "type": "number",
            "description": "How long to ease between colors.",
            "format": "float"
          },
          "Name": {
            "type": "string",
            "description": "The theme name.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "Theme ID. Will be auto-assigned for user defined themes.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AudioData": {
        "type": "object",
        "properties": {
          "IsDefault": {
            "type": "boolean",
            "description": "Is this the default device?"
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Is this device enabled?"
          },
          "IsLoopback": {
            "type": "boolean",
            "description": "Is this a loopback device?"
          },
          "Id": {
            "type": "string",
            "description": "Same as Device Name.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Device Name (Also Device ID).",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AudioScene": {
        "type": "object",
        "properties": {
          "RotationLower": {
            "type": "number",
            "description": "Overall lower limit to color range (0 - 1)\r\nIf lower is GEQ higher, will be ignored",
            "format": "float"
          },
          "RotationUpper": {
            "type": "number",
            "description": "Overall upper limit to color range (0 - 1)\r\nIf lower is GEQ higher, will be ignored",
            "format": "float"
          },
          "RotationSpeed": {
            "type": "number",
            "description": "How many degrees to rotate on each trigger (0 - 1)",
            "format": "float"
          },
          "RotationThreshold": {
            "type": "number",
            "description": "Minimum amplitude to trigger color rotation",
            "format": "float"
          },
          "OctaveMap": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceMode": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "The current device mode.\r\nOff = 0\r\nVideo = 1\r\nAudio = 2\r\nAmbient = 3\r\nAudioVideo = 4\r\nUdp = 5\r\nDreamScreen = 6",
        "format": "int32"
      },
      "IColorTargetData": {
        "type": "object",
        "properties": {
          "Enable": {
            "type": "boolean",
            "description": "If set, Glimmr will attempt to control this device.",
            "readOnly": true
          },
          "KeyProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingsProperty"
            },
            "description": "An array of properties that will be auto-filled in the web UI.",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "description": "A unique device identifier.",
            "nullable": true,
            "readOnly": true
          },
          "IpAddress": {
            "type": "string",
            "description": "The device IP address.",
            "nullable": true,
            "readOnly": true
          },
          "LastSeen": {
            "type": "string",
            "description": "The last time the device was seen via device discovery.",
            "nullable": true,
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "description": "The device name.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for various color target data classes.\r\nAll color target data MUST have these properties,\r\nbut will almost certainly implement more.\r\n\r\nRefer to actual device JSON from /devices\r\nfor full device structures."
      },
      "SettingsProperty": {
        "type": "object",
        "properties": {
          "ValueHint": {
            "type": "string",
            "description": "If set, this will be shown beneath the property.",
            "nullable": true
          },
          "ValueLabel": {
            "type": "string",
            "description": "Main label for the setting.",
            "nullable": true
          },
          "ValueMax": {
            "type": "string",
            "description": "Maximum value that can be set for this property.",
            "nullable": true
          },
          "ValueMin": {
            "type": "string",
            "description": "Minimum Value that can be set for this property.",
            "nullable": true
          },
          "ValueName": {
            "type": "string",
            "description": "The property name to set in the device object.",
            "nullable": true
          },
          "ValueStep": {
            "type": "string",
            "description": "Step size for this property. (Only applies to numeric value types)",
            "nullable": true
          },
          "ValueType": {
            "type": "string",
            "description": "The control type to create in the web UI.\r\nPossible options:\r\ntext - Standard text input\r\ncheck - A checkbox (toggle)\r\nnumber - A number input (can be limited by valuemax/min/step\r\nledmap - Create a LED map (custom)\r\nbeamMap - Create a Lifx Beam map\r\nsectorLedMap - Create a LED map for WLED that has multiple sections\r\nselect - standard select, populate the \"Options\" dictionary to auto-fill\r\nsectormap - Create a standard Sector map\r\nnanoleaf - Draw nano leaves\r\nhue - Draw Hue selection stuff",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A class used by the web UI to automagically generate device settings."
      },
      "StoreData": {
        "type": "object",
        "properties": {
          "SystemData": {
            "$ref": "#/components/schemas/SystemData"
          },
          "Devices": {
            "type": "array",
            "items": { },
            "description": "List of devices and their settings.",
            "nullable": true
          },
          "DevAudio": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioData"
            },
            "description": "List of available audio devices.",
            "nullable": true
          },
          "DevUsb": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of available USB devices.",
            "nullable": true
          },
          "AmbientScenes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmbientScene"
            },
            "description": "List of detected ambient scenes.",
            "nullable": true
          },
          "AudioScenes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AudioScene"
            },
            "description": "List of detected audio scenes.",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "description": "Version string based on current build + github revison.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A JSON representation of the database."
      },
      "SystemData": {
        "type": "object",
        "properties": {
          "AutoDisabled": {
            "type": "boolean",
            "description": "If the system is currently auto-disabled due to no input.",
            "default": false
          },
          "AutoRemoveDevices": {
            "type": "boolean",
            "description": "If enabled, devices will be automatically removed after the specified time.",
            "default": false
          },
          "AutoUpdate": {
            "type": "boolean",
            "description": "If enabled, Glimmr will automatically update itself daily.",
            "default": false
          },
          "DefaultSet": {
            "type": "boolean",
            "description": "Set on first-time initialization. Don't change this.",
            "default": false
          },
          "EnableAutoBrightness": {
            "type": "boolean",
            "description": "If set, wired LED strips will have their brightness automatically adjusted,\r\na la WLED.",
            "default": true
          },
          "EnableAutoDisable": {
            "type": "boolean",
            "description": "If set, streaming will be automatically stopped when no input is detected.",
            "default": true
          },
          "EnableLetterBox": {
            "type": "boolean",
            "description": "If set, horizontal black bars will be cropped when detected.",
            "default": true
          },
          "EnablePillarBox": {
            "type": "boolean",
            "description": "If set, vertical black bars will be cropped when detected.",
            "default": true
          },
          "SkipDemo": {
            "type": "boolean",
            "description": "If set, rainbow wipe will not be played on application startup.",
            "default": false
          },
          "SkipTour": {
            "type": "boolean",
            "description": "If set, introduction/tour will not run on UI load.",
            "default": false
          },
          "UseCenter": {
            "type": "boolean",
            "description": "If set, sectors will also be collected from teh center of the screen, not just the perimeter.",
            "default": false
          },
          "AblAmps": {
            "type": "number",
            "description": "Input amps of power supply.",
            "format": "float",
            "default": 3
          },
          "AblVolts": {
            "type": "number",
            "description": "Input voltage of power supply.",
            "format": "float",
            "default": 5
          },
          "AudioGain": {
            "type": "number",
            "description": "How much to increase input audio volume.",
            "format": "float",
            "default": 0.5
          },
          "AudioMin": {
            "type": "number",
            "description": "Low cutoff for audio detection, values below this will not be displayed.",
            "format": "float",
            "default": 0.025
          },
          "AmbientShow": {
            "type": "integer",
            "description": "Current ambient scene.",
            "format": "int32",
            "default": 0
          },
          "AudioScene": {
            "type": "integer",
            "description": "Current audio scene.",
            "format": "int32",
            "default": 0
          },
          "AutoDisableDelay": {
            "type": "integer",
            "description": "How long to wait (in seconds) before disabling streaming when no\r\ninput is detected, when auto-disable is active.",
            "format": "int32",
            "default": 30
          },
          "AutoDiscoveryFrequency": {
            "type": "integer",
            "description": "Delay (in minutes) between execution of auto-discovery.",
            "format": "int32",
            "default": 60
          },
          "AutoRemoveDevicesAfter": {
            "type": "integer",
            "description": "If enabled,",
            "format": "int32",
            "default": 7
          },
          "AutoUpdateTime": {
            "type": "integer",
            "description": "How frequently to automatically send updated system data to the UI.",
            "format": "int32",
            "default": 2
          },
          "BaudRate": {
            "type": "integer",
            "description": "Speed at which to attempt discovering Adalight devices.",
            "format": "int32",
            "default": 115200
          },
          "BottomCount": {
            "type": "integer",
            "description": "Number of LEDs along the bottom of the screen.",
            "format": "int32",
            "default": 96
          },
          "CamType": {
            "type": "integer",
            "description": "Type of camera used for capture.\r\n0 = Raspberry pi camera module\r\n1 = USB webcam",
            "format": "int32",
            "default": 1
          },
          "CaptureMode": {
            "type": "integer",
            "description": "Currently selected capture mode for video input.\r\nCamera = 1\r\nHdmi = 2\r\nScreen = 3",
            "format": "int32",
            "default": 2
          },
          "CropDelay": {
            "type": "integer",
            "description": "The number of frames required for detection before cropping is\r\nactivated, if enabled.",
            "format": "int32",
            "default": 15
          },
          "DeviceMode": {
            "type": "integer",
            "description": "The currently selected device mode.\r\nOff = 0\r\nVideo = 1\r\nAudio = 2\r\nAudioVideo = 4\r\nAmbient = 3\r\nUdp = 5\r\nDreamScreen =",
            "format": "int32",
            "default": 0
          },
          "DiscoveryTimeout": {
            "type": "integer",
            "description": "How long to wait before canceling discovery tasks, in seconds.",
            "format": "int32",
            "default": 10
          },
          "HSectors": {
            "type": "integer",
            "description": "Number of horizontal sectors around the screen",
            "format": "int32",
            "default": 10
          },
          "LedCount": {
            "type": "integer",
            "description": "Number of LEDs for the \"master grid\". This is auto-computed via left/right/top/bottom counts.",
            "format": "int32",
            "default": 0,
            "readOnly": true
          },
          "LeftCount": {
            "type": "integer",
            "description": "Number of LEDs along the left side of the screen.",
            "format": "int32",
            "default": 54
          },
          "OpenRgbPort": {
            "type": "integer",
            "description": "Port to use for OpenRGB communication. (Default is 6742)",
            "format": "int32",
            "default": 6742
          },
          "PreviewMode": {
            "type": "integer",
            "description": "Image preview mode for the web UI.\r\n0 = None\r\n1 = LED\r\n2 = Sectors",
            "format": "int32",
            "default": 0
          },
          "PreviousMode": {
            "type": "integer",
            "description": "The previous device mode before Auto-disable was activated.",
            "format": "int32",
            "default": 0
          },
          "RightCount": {
            "type": "integer",
            "description": "Number of LEDs along the right side of the screen.",
            "format": "int32",
            "default": 54
          },
          "SectorCount": {
            "type": "integer",
            "description": "Total number of sectors available. Is auto-computed based on sector counts and\r\nwhether center-sectoring is enabled.",
            "format": "int32",
            "default": 0,
            "readOnly": true
          },
          "StreamMode": {
            "type": "integer",
            "description": "Currently selected streaming mode.\r\n0 = DreamScreen\r\n1 = UDP (WLED, Glimmr)",
            "format": "int32",
            "default": 15
          },
          "TopCount": {
            "type": "integer",
            "description": "Number of LEDs along the top of the screen.",
            "format": "int32",
            "default": 96
          },
          "UsbSelection": {
            "type": "integer",
            "description": "Currently selected USB device for HDMI/camera capture.",
            "format": "int32",
            "default": 0
          },
          "VSectors": {
            "type": "integer",
            "description": "Number of vertical sectors along the left/right of screen.",
            "format": "int32",
            "default": 6
          },
          "AmbientColor": {
            "type": "string",
            "description": "Current ambient color used when AmbientShow is set to \"solid\".",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "description": "Device name (should be device hostname)",
            "default": "",
            "nullable": true
          },
          "DsIp": {
            "type": "string",
            "description": "Target DreamScreen device to receive color data from.\r\n(Streaming mode must be set to 0/DreamScreen)",
            "default": "",
            "nullable": true
          },
          "OpenRgbIp": {
            "type": "string",
            "description": "IP address to use for OpenRGB communication.",
            "default": "127.0.0.1",
            "nullable": true
          },
          "RecDev": {
            "type": "string",
            "description": "Name of the selected audio device for audio and audio/video capture.",
            "default": "",
            "nullable": true
          },
          "Theme": {
            "type": "string",
            "description": "Web UI theme\r\n(dark/light)",
            "default": "dark",
            "nullable": true
          },
          "TimeZone": {
            "type": "string",
            "description": "Time zone to use for automatic updates.",
            "default": "US/Central",
            "nullable": true
          },
          "Units": {
            "type": "string",
            "description": "Temperature units.\r\n0 = Not 'Murica.\r\n1 = 'Murica.",
            "default": "0",
            "nullable": true
          },
          "BlackLevel": {
            "type": "integer",
            "description": "Colors below this brightness will be considered \"black\".\r\n(Max 255)",
            "format": "int32",
            "default": 7
          }
        },
        "additionalProperties": false
      }
    }
  }
}